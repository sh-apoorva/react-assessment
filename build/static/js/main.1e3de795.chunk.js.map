{"version":3,"sources":["components/data-list/data-list.component.jsx","components/modal/modal.component.jsx","App.js","serviceWorker.js","index.js"],"names":["DataList","props","datalist","map","dta","index","title","url","author","created_at","created_at_i","key","Modal","onClose","e","this","show","class","id","children","onClick","React","Component","App","showModal","setState","state","getData","fetch","then","response","json","data","hits","header","searchField","setInterval","Object","keys","toUpperCase","filteredList","filter","toLowerCase","includes","className","type","placeholder","target","value","renderTableHeader","propTypes","PropTypes","func","isRequired","bool","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wOAEaA,EAAW,SAAAC,GACpB,OAAOA,EAAMC,SAASC,KAAI,SAACC,EAAKC,GAAW,IAC/BC,EAAiDF,EAAjDE,MAAOC,EAA0CH,EAA1CG,IAAKC,EAAqCJ,EAArCI,OAAQC,EAA6BL,EAA7BK,WAAYC,EAAiBN,EAAjBM,aACxC,OACA,wBAAIC,IAAKD,GACL,4BAAKJ,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKC,QCPJG,EAAK,4MACdC,QAAU,SAAAC,GACN,EAAKb,MAAMY,SAAW,EAAKZ,MAAMY,QAAQC,IAF/B,uDAKV,OAAIC,KAAKd,MAAMe,KAIX,yBAAKC,MAAM,QAAQC,GAAG,SAClB,4CACA,yBAAKD,MAAM,WAAWF,KAAKd,MAAMkB,UACjC,yBAAKF,MAAM,WACX,4BAAQA,MAAM,gBAAgBG,QAASL,KAAKF,SAA5C,WAPG,SAND,GAAuBQ,IAAMC,W,gBCGzCC,G,wDACJ,aAAc,IAAD,8BACX,gBAUFC,UAAY,SAAAV,GACV,EAAKW,SAAS,CACZT,MAAO,EAAKU,MAAMV,QAbT,EAiBbH,QAAU,SAAAC,GACR,EAAKb,MAAMY,SAAW,EAAKZ,MAAMY,QAAQC,IAlB9B,EA2Bba,QAAU,WACRC,MAAM,kEACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKP,SAAS,CAAEvB,SAAU8B,EAAKC,WA3B7C,EAAKP,MAAQ,CACXxB,SAAU,GACVgC,OAAQ,CAAC,CAAE5B,MAAO,SAAUC,IAAK,GAAIC,OAAQ,UAAWC,WAAY,wBACpE0B,YAAa,GACbnB,MAAM,GAPG,E,gEAsBXD,KAAKY,UAELS,YAAYrB,KAAKY,QAAS,O,0CAWxB,OADWU,OAAOC,KAAKvB,KAAKW,MAAMQ,OAAO,IAC3B/B,KAAI,SAACQ,EAAKN,GACtB,OAAO,wBAAIM,IAAKN,GAAQM,EAAI4B,kB,+BAIzB,IAAD,SAC0BxB,KAAKW,MAA9BxB,EADD,EACCA,SAAUiC,EADX,EACWA,YACXK,EAAetC,EAASuC,QAAO,SAAArC,GAAG,OAAIA,EAAIE,MAAMoC,cAAcC,SAClER,EAAYO,kBAGd,OACE,yBAAKE,UAAU,OACb,2BAAOC,KAAK,SAASC,YAAY,SAAS1B,QAAS,SAAAN,GAAC,OAAI,EAAKW,SAAS,CAAEU,YAAarB,EAAEiC,OAAOC,WAC9F,6BACA,2BAAO9B,GAAG,YACR,+BACE,4BAAKH,KAAKkC,qBACV,kBAAC,EAAD,CAAU/C,SAAUsC,MAGxB,kBAAC,EAAD,CAAO3B,QAASE,KAAKS,UAAWR,KAAMD,KAAKW,MAAMV,MAAjD,oBACA,4BAAQI,QAAS,SAAAN,GAAM,EAAKU,cAA5B,gBACA,6BAAK,6BAAK,6BAAK,6BAAK,kC,GA3DVF,cAiElBV,EAAMsC,UAAY,CAChBrC,QAASsC,IAAUC,KAAKC,WACxBrC,KAAMmC,IAAUG,KAAKD,YAGR9B,QChEKgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1e3de795.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const DataList = props => {\r\n    return props.datalist.map((dta, index) => {\r\n        const { title, url, author, created_at, created_at_i } = dta //destructuring\r\n        return (\r\n        <tr key={created_at_i}>\r\n            <td>{title}</td>\r\n            <td>{url}</td>\r\n            <td>{author}</td>\r\n            <td>{created_at}</td>\r\n        </tr>\r\n        )\r\n    })\r\n}","import React from 'react';\r\n// import \"./modal.style.css\";\r\n\r\nexport const Modal = class Modal extends React.Component {\r\n    onClose = e => {\r\n        this.props.onClose && this.props.onClose(e);\r\n    };\r\n    render() {\r\n        if(!this.props.show){\r\n            return null;\r\n        }\r\n        return (\r\n            <div class=\"modal\" id=\"modal\">\r\n                <h2>Modal Window</h2>\r\n                <div class=\"content\">{this.props.children}</div>\r\n                <div class=\"actions\">\r\n                <button class=\"toggle-button\" onClick={this.onClose}>\r\n                    close\r\n                </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n  }","import React, { Component } from 'react';\nimport {DataList} from './components/data-list/data-list.component';\nimport {Modal} from \"./components/modal/modal.component\";\nimport PropTypes from \"prop-types\";\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      datalist: [],\n      header: [{ title: 'Header', url: '', author: 'Apoorva', created_at: 'YYYY-MM-DD 00:00:00' }],\n      searchField: '',\n      show: false\n    }    \n  }\n\n  showModal = e => {\n    this.setState({\n      show: !this.state.show\n    });\n  };\n\n  onClose = e => {\n    this.props.onClose && this.props.onClose(e);\n  };\n\n  componentDidMount(){\n    this.getData();\n\n    setInterval(this.getData, 10000); // runs every 5 seconds.\n  }\n\n  getData = () => {\n    fetch('https://hn.algolia.com/api/v1/search_by_date?tags=story&page=0')\n    .then(response => response.json())\n    .then(data => this.setState({ datalist: data.hits }));\n  }\n\n  renderTableHeader() {\n    let header = Object.keys(this.state.header[0])\n      return header.map((key, index) => {\n        return <th key={index}>{key.toUpperCase}</th>\n    })\n  }\n\n  render(){\n    const {datalist, searchField} = this.state;\n    const filteredList = datalist.filter(dta => dta.title.toLowerCase().includes(\n      searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <input type=\"search\" placeholder=\"Search\" onClick={e => this.setState({ searchField: e.target.value })} />\n        <hr/>\n        <table id='students'>\n          <tbody>\n            <tr>{this.renderTableHeader()}</tr>\n            <DataList datalist={filteredList} />\n          </tbody>\n        </table>\n        <Modal onClose={this.showModal} show={this.state.show}>Message in Modal</Modal>\n        <button onClick={e => {this.showModal();}}> Show Modal </button>\n        <br/><br/><br/><br/><br/>\n      </div>\n    );\n  }\n}\n\nModal.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  show: PropTypes.bool.isRequired\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}